
name: Maven Package

on:
  #push:
  #  branches:
  #    - main
  pull_request: # [master, next]
    types:
      - closed
 #release:
 #   types: [created]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      packages: write

    steps:

    - name: Check out the repo
      uses: actions/checkout@v4

    - name: Set up JDK 17
      id: set-up-jdk
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
      # Cache and restore Maven dependencies

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-

    - name: Build with Maven
      run: mvn test --file pom.xml

  new-version:

    needs: [ test ]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    defaults:
      run:
        shell: bash

    outputs:
      new-release-version: ${{ steps.set-release-version.outputs.new-release-version }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 17
        id: set-up-jdk
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
        # Cache and restore Maven dependencies

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Set Release version env variable
        id: set-release-version
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} versions:commit --file pom.xml
          echo "new-release-version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Push Action
        run: |
          git config  --local user.name '${{env.GIT_USERNAME}}'
          git config  --local user.email '${{env.GIT_EMAIL}}'
          git add .
          git commit -m "updated version in pom.xml"
          git push

  create-release:  
    runs-on: ubuntu-latest

    needs: [ new-version ]
    
    steps:
      #- name: "Check out the repo"
      #  uses: "actions/checkout@v4"

      - name: Create Release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{needs.new-version.outputs.new-release-version}}.${{github.run_number}}
          release_name: Release ${{needs.new-version.outputs.new-release-version}}
          #body: |
          #  Changes in this Release
          #  - First Change
          #  - Second Change
          draft: false
          prerelease: false

