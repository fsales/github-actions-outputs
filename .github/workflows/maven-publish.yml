
name: Maven Package

on:
  push:
    branches:
      - main
  release:
    types: [created]

jobs:
  build:

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
      output3: ${{ steps.set-release-version.outputs.new-version }}

    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      id: set-up-jdk
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
      # Cache and restore Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-

    - id: step1
      name: step1
      run: echo "::set-output name=test::hello"
    - id: step2
      name: step2
      run: echo "::set-output name=test::world"

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Set Release version env variable
      id: set-release-version
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} versions:commit --file pom.xml
        echo "new-version=teste" >> $GITHUB_OUTPUT
      
    
  job2:
    runs-on: ubuntu-latest
    # Wait from the job1 to be completed before starting job2
    needs: build
    steps:
      - id: print-hello-word
        run: echo ${{needs.build.outputs.output1}} ${{needs.build.outputs.output2}}
      
      - id: print-new-version
        run: echo ${{needs.build.outputs.output3}}

